// Generated by CoffeeScript 1.5.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Chat.MockStorage = (function() {

    function MockStorage() {
      this.storage = localStorage;
    }

    MockStorage.prototype.getItem = function(key) {
      return this.storage.getItem(key);
    };

    MockStorage.prototype.setItem = function(key, value) {
      return this.storage.setItem(key, value);
    };

    MockStorage.prototype.removeItem = function(key) {
      return this.storage.removeItem(key);
    };

    MockStorage.prototype.length = function() {
      return this.storage.length;
    };

    MockStorage.prototype.key = function(i) {
      return this.storage.key(i);
    };

    return MockStorage;

  })();

  Chat.SocketStorage = (function(_super) {

    __extends(SocketStorage, _super);

    function SocketStorage() {
      SocketStorage.__super__.constructor.apply(this, arguments);
      this.storage = new Chat.MockStorage();
    }

    SocketStorage.subscribe = function(model, storageKey) {
      var addModel, fun, json, randomInt;
      randomInt = function(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
      };
      json = {
        text: "IT WORKS!",
        user: "robot"
      };
      addModel = function() {
        var record;
        json.id = json.id + randomInt(0, 1000);
        record = model.createFromJSON(json);
        return model.get("all").add(record);
      };
      SocketStorage.on(storageKey, addModel);
      fun = function() {
        Chat.SocketStorage.fire(storageKey);
        return setTimeout(fun, 3000);
      };
      return setTimeout(fun, 3000);
    };

    SocketStorage.prototype._forAllStorageEntries = function(iterator) {
      var i, key, _i, _ref;
      for (i = _i = 0, _ref = this.storage.length(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        key = this.storage.key(i);
        iterator.call(this, key, this.storage.getItem(key));
      }
      return true;
    };

    SocketStorage.prototype.readAll = SocketStorage.skipIfError(function(env, next) {
      var key, model;
      try {
        arguments[0].recordsAttributes = this._storageEntriesMatching(env.subject, env.options.data);
      } catch (error) {
        arguments[0].error = error;
      }
      model = env.subject;
      key = model.storageKey;
      SocketStorage.subscribe(model, key);
      return next();
    });

    return SocketStorage;

  }).call(this, Batman.LocalStorage);

  Batman.MockSocket = (function(_super) {

    __extends(MockSocket, _super);

    function MockSocket(url) {
      this.url = url;
      this.randomInt = __bind(this.randomInt, this);
      this.onclose = __bind(this.onclose, this);
      this.onmessage = __bind(this.onmessage, this);
      this.onopen = __bind(this.onopen, this);
      this.send = __bind(this.send, this);
    }

    MockSocket.prototype.send = function(str) {
      if (typeof str === 'string') {
        return this.onmessage({
          data: str
        });
      } else {
        if (str.hasOwnProperty("data")) {
          return this.onmessage(str);
        } else {
          return this.onmessage({
            data: JSON.stringify(str)
          });
        }
      }
    };

    MockSocket.prototype.onopen = function() {
      return console.log("open");
    };

    MockSocket.prototype.onmessage = function(event) {
      var data;
      data = event.data;
      return console.log("onmessage: " + data);
    };

    MockSocket.prototype.onclose = function() {
      return console.log("close");
    };

    MockSocket.prototype.randomInt = function(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    };

    return MockSocket;

  })(Batman.Object);

  /* Channel class
  evey socket sends info for various channels
  to channels the models will be binded
  each model will have a channel that is connected to its storage key
  */


  Batman.Channel = (function(_super) {

    __extends(Channel, _super);

    function Channel(name) {
      this.name = name;
      this.attach = __bind(this.attach, this);
      this.onmessage = __bind(this.onmessage, this);
      this.receive = __bind(this.receive, this);
      this.send = __bind(this.send, this);
    }

    Channel.prototype.send = function(obj) {
      return fire("send", obj);
    };

    Channel.prototype.receive = function(event) {
      if (event.hasOwnProperty("data")) {
        return this.onmessage(event.data);
      } else {
        return this.onmessage(event);
      }
    };

    Channel.prototype.onmessage = function(event) {};

    Channel.prototype.attach = function(obj) {
      var _this = this;
      obj.on(this.name, function(event) {
        return _this.receive(event);
      });
      obj.on("all", function(event) {
        return _this.receive(event);
      });
      return this;
    };

    return Channel;

  })(Batman.Object);

  Batman.Socket = (function(_super) {

    __extends(Socket, _super);

    function Socket(url, real) {
      var _this = this;
      this.url = url;
      if (real == null) {
        real = true;
      }
      this.newChannel = __bind(this.newChannel, this);
      if (Batman.container.hasOwnProperty("socket")) {
        this.socket = Batman.container["socket"];
      } else {
        if (real) {
          this.socket = new WebSocket(this.url);
        } else {
          this.socket = new Batman.MockSocket(this.url);
        }
        Batman.container.socket = this.socket;
        this.socket.onmessage = function(event) {
          return _this.broadcast(event);
        };
      }
    }

    Socket.prototype.broadcastTo = function(message, channelName) {
      if (typeof message === 'string') {
        message = {
          data: message,
          channel: channelName
        };
      } else {
        message.channel = channelName;
      }
      return this.broadcast(message);
    };

    Socket.prototype.broadcast = function(message) {
      if (message.hasOwnProperty("channel")) {
        return this.fire(message.channel, message);
      } else {
        if (message.hasOwnProperty("data") && message.data.hasOwnProperty("channel")) {
          return this.fire(message.data.channel, message.data);
        } else {
          return this.fire("default", message);
        }
      }
    };

    Socket.prototype.newChannel = function(name) {
      return new Batman.Channel(name).attach(this);
    };

    Socket.prototype.send = function(obj) {
      var json;
      if (typeof obj === 'string') {
        json = {
          data: obj
        };
      } else {
        json = obj;
      }
      return this.socket.send(json);
    };

    Socket.prototype.send = function(obj, channelName) {
      var json;
      if (typeof obj === 'string') {
        json = {
          data: obj
        };
      } else {
        json = obj;
      }
      json.channel = channelName;
      return this.socket.send(json);
    };

    return Socket;

  })(Batman.Object);

}).call(this);
