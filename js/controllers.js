// Generated by CoffeeScript 1.6.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Chat.MessagesController = (function(_super) {

    __extends(MessagesController, _super);

    function MessagesController() {
      return MessagesController.__super__.constructor.apply(this, arguments);
    }

    MessagesController.prototype.index = function(params) {};

    return MessagesController;

  })(Batman.Controller);

  Chat.TasksController = (function(_super) {

    __extends(TasksController, _super);

    TasksController.prototype.test = "test";

    function TasksController() {
      TasksController.__super__.constructor.apply(this, arguments);
      this.set('newTask', new Chat.Task({
        completed: false
      }));
    }

    TasksController.prototype.items = function() {
      return Task.get('all');
    };

    TasksController.prototype.all = function() {
      return this.set('currentTasks', Chat.Task.get('all'));
    };

    TasksController.prototype.completed = function() {
      this.set('currentTasks', Chat.Task.get('completed'));
      return this.render({
        source: 'tasks/all'
      });
    };

    TasksController.prototype.active = function() {
      this.set('currentTasks', Chat.Task.get('active'));
      return this.render({
        source: 'tasks/all'
      });
    };

    TasksController.prototype.createTask = function() {
      var _this = this;
      return this.get('newTask').save(function(err, task) {
        if (err) {
          if (!(err instanceof Batman.ErrorsSet)) {
            throw err;
          }
        } else {
          return _this.set('newTask', Chat.Task({
            completed: false,
            title: ""
          }));
        }
      });
    };

    TasksController.prototype.taskDoneChanged = function(node, event, context) {
      var task;
      task = context.get('task');
      return task.save(function(err) {
        if (err && !err instanceof Batman.ErrorsSet) {
          throw err;
        }
      });
    };

    TasksController.prototype.destroyTask = function(node, event, context) {
      var task;
      task = context.get('task');
      return task.destroy(function(err) {
        if (err) {
          throw err;
        }
      });
    };

    TasksController.prototype.toggleAll = function(node, context) {
      return Chat.Task.get('all').forEach(function(task) {
        task.set('completed', !!node.checked);
        return task.save(function(err) {
          if (err && !err instanceof Batman.ErrorsSet) {
            throw err;
          }
        });
      });
    };

    TasksController.prototype.clearCompleted = function() {
      return Chat.Task.get('completed').forEach(function(task) {
        return task.destroy(function(err) {
          if (err) {
            throw err;
          }
        });
      });
    };

    TasksController.prototype.toggleEditing = function(node, event, context) {
      var editing, input, task, _ref;
      task = context.get('task');
      editing = task.set('editing', !task.get('editing'));
      if (editing) {
        input = document.getElementById("task-input-" + (task.get('id')));
        input.focus();
        return input.select();
      } else {
        if (((_ref = task.get('title')) != null ? _ref.length : void 0) > 0) {
          return task.save(function(err, task) {
            if (err && !err instanceof Batman.ErrorsSet) {
              throw err;
            }
          });
        } else {
          return task.destroy(function(err, task) {
            if (err) {
              throw err;
            }
          });
        }
      }
    };

    TasksController.prototype.disableEditingUponSubmit = function(node, event, context) {
      if (Batman.DOM.events.isEnter(event)) {
        return this.toggleEditing(node, event, context);
      }
    };

    return TasksController;

  })(Batman.Controller);

  Chat.UsersController = (function(_super) {

    __extends(UsersController, _super);

    function UsersController() {
      return UsersController.__super__.constructor.apply(this, arguments);
    }

    UsersController.prototype.index = function(params) {};

    return UsersController;

  })(Batman.Controller);

}).call(this);
