// Generated by CoffeeScript 1.4.0
(function() {
  var mockData,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Chat.MockData = (function(_super) {

    __extends(MockData, _super);

    function MockData() {
      this.createUsers = __bind(this.createUsers, this);
      return MockData.__super__.constructor.apply(this, arguments);
    }

    MockData.prototype.createTasks = function() {
      if (!Chat.Task.get('all').length) {
        new Chat.Task({
          title: 'Show this code to Daniel',
          completed: true
        }).save();
        new Chat.Task({
          title: 'Integrate with semantic chat application',
          completed: false
        }).save();
        return new Chat.Task({
          title: 'Run this code in the browser',
          completed: true
        }).save();
      }
    };

    MockData.prototype.createMessages = function() {
      if (!Chat.Message.get('all').length) {
        new Chat.Message({
          text: "Hi guys! Look at my code!",
          user: "Anton"
        }).save();
        new Chat.Message({
          text: "Wait a moment, I shall see",
          user: "Daniel"
        }).save();
        return new Chat.Message({
          text: "Comrades, it is not our primary focus, let's go and continue writing grant application!",
          user: "coced"
        }).save();
      }
    };

    MockData.prototype.createUsers = function() {
      if (!Chat.User.get('all').length) {
        new Chat.User({
          name: "Anton",
          status: "active"
        }).save();
        new Chat.User({
          name: "Daniel",
          status: "active"
        }).save();
        return new Chat.User({
          name: "coced",
          status: "active"
        }).save();
      }
    };

    return MockData;

  })(Batman.Object);

  mockData = new MockData;

  mockData.createTasks();

  mockData.createMessages();

  mockData.createUsers();

}).call(this);
