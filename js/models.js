// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Chat.Task = (function(_super) {

    __extends(Task, _super);

    function Task() {
      return Task.__super__.constructor.apply(this, arguments);
    }

    Task.encode('owner', 'title', 'completed');

    Task.persist(Batman.LocalStorage);

    Task.validate('title', {
      presence: true
    });

    Task.storageKey = 'tasks';

    Task.classAccessor('active', function() {
      return this.get('all').filter(function(task) {
        return !task.get('completed');
      });
    });

    Task.classAccessor('completed', function() {
      return this.get('all').filter(function(task) {
        return task.get('completed');
      });
    });

    Task.wrapAccessor('title', function(core) {
      return {
        set: function(key, value) {
          return core.set.call(this, key, value != null ? value.trim() : void 0);
        }
      };
    });

    return Task;

  })(Batman.Model);

  Chat.User = (function(_super) {

    __extends(User, _super);

    function User() {
      return User.__super__.constructor.apply(this, arguments);
    }

    User.encode('name', 'status');

    User.validate('name', {
      presence: true
    });

    User.persist(Batman.LocalStorage);

    User.storageKey = 'users';

    return User;

  })(Batman.Model);

  Chat.Message = (function(_super) {

    __extends(Message, _super);

    function Message() {
      return Message.__super__.constructor.apply(this, arguments);
    }

    Message.encode('text', 'user');

    Message.validate('text', {
      presence: true
    });

    Message.persist(Chat.SocketStorage);

    Message.storageKey = 'messages';

    return Message;

  })(Batman.Model);

}).call(this);
